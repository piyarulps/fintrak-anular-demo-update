import { Component, OnInit } from '@angular/core';
import { GeneralSetupService } from 'app/setup/services';
import { LoadingService } from 'app/shared/services/loading.service';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import swal, { SweetAlertType } from 'sweetalert2';
import { GlobalConfig } from 'app/shared/constant/app.constant';
import { ValidationService } from 'app/shared/services/validation.service';

@Component({
  //selector: 'app-insurance-company',
  templateUrl: './insurance-company.component.html',
})
export class InsuranceCompanyComponent implements OnInit {

  insuranceCompanyForm: FormGroup;
  insuranceTypeForm: FormGroup;
  displayInsuranceTypeForm: boolean = false;
  displayInsuranceCompanyForm: boolean = false;
  selectedId: number;
  insuranceCompanies: any;
  rowToEdit: any;
  insuranceTypes: any;
  formState: any;


  constructor(
    private generalSetupService: GeneralSetupService,
    private loadingService: LoadingService,
    private fb: FormBuilder,
  ) { }

  ngOnInit() {
    this.getAllInsuranceCompanies();
    this.clearFormControls();
    this.getInsuranceTypes();
  }

  getInsuranceTypes() {
    this.generalSetupService.getAllInsuranceTypes().subscribe((response:any) => {
      this.insuranceTypes = response.result;
    });;
  }

  getAllInsuranceCompanies() {
    this.generalSetupService.getAllInsuranceCompanies().subscribe((response:any) => {
      this.insuranceCompanies = response.result;
    });;
  }

  addInsuranceCompany() {
      this.formState = "Add New";
      this.selectedId = null;
      this.clearFormControls();
      this.displayInsuranceCompanyForm = true;
  }

  addInsuranceType() {
    this.formState = "Add New";
    this.selectedId = null;
    this.clearFormControls();
    this.displayInsuranceTypeForm = true;
}

 
  saveInsuranceCompany(form) {

    let body = {
    companyName: form.value.companyName,
    address: form.value.companyAddress,
    contactEmail: form.value.contactEmail,
    phoneNumber: form.value.phoneNumber,
    };

    console.log('BODY', body);

    this.loadingService.show();
    if (this.selectedId === null) {
        this.generalSetupService.saveInsuranceCompany(body).subscribe((response:any) => {
            this.loadingService.hide();
            if (response.success == true){
                this.getAllInsuranceCompanies();
                this.displayInsuranceCompanyForm = false;
                swal(`${GlobalConfig.APPLICATION_NAME}`, 'Saved Successfully!', 'success');
              }
            else{ 
              swal(`${GlobalConfig.APPLICATION_NAME}`, response.message, 'error');
            }
        }, (err: any) => {
            this.loadingService.hide();
            swal(`${GlobalConfig.APPLICATION_NAME}`, JSON.stringify(err), 'error');
        });
    } else {

        this.generalSetupService.updateInsuranceCompany(this.selectedId, body).subscribe((response:any) => {
            this.loadingService.hide();
            if (response.success == true) 
            {
              this.getAllInsuranceCompanies();
              this.displayInsuranceCompanyForm = false;
              swal(`${GlobalConfig.APPLICATION_NAME}`, 'Updated Successfully!', 'success');
            }
            else {
              swal(`${GlobalConfig.APPLICATION_NAME}`, response.message, 'error');
            }
        }, (err: any) => {
            this.loadingService.hide();
            swal(`${GlobalConfig.APPLICATION_NAME}`, JSON.stringify(err), 'error');
        });
    }
    
}


saveInsuranceType(form) {

  let body = {
    insuranceType: form.value.insuranceType,
  };

  this.loadingService.show();
  if (this.selectedId === null) {
      this.generalSetupService.saveInsuranceType(body).subscribe((response:any) => {
          this.loadingService.hide();
          if (response.success == true){
              this.getInsuranceTypes();
              this.displayInsuranceTypeForm = false;
              swal(`${GlobalConfig.APPLICATION_NAME}`, 'Saved Successfully!', 'success');
            }
          else{ 
            swal(`${GlobalConfig.APPLICATION_NAME}`, response.message, 'success');
          }
      }, (err: any) => {
          this.loadingService.hide();
          swal(`${GlobalConfig.APPLICATION_NAME}`, JSON.stringify(err), 'error');
      });
  } else {

      this.generalSetupService.updateInsuranceType(this.selectedId, body).subscribe((response:any) => {
          this.loadingService.hide();
          if (response.success == true) 
          {
            this.getInsuranceTypes();
            this.displayInsuranceTypeForm = false;
            swal(`${GlobalConfig.APPLICATION_NAME}`, 'Updated Successfully!', 'success');
          }
          else {
            swal(`${GlobalConfig.APPLICATION_NAME}`, response.message, 'error');
          }
      }, (err: any) => {
          this.loadingService.hide();
          swal(`${GlobalConfig.APPLICATION_NAME}`, JSON.stringify(err), 'error');
      });
  }
  
}


clearFormControls() {
  this.insuranceCompanyForm = this.fb.group({
    companyName: ['', Validators.required],
    companyAddress: ['', Validators.required],
    contactEmail: ['', Validators.compose([Validators.required, ValidationService.isEmail])],
    phoneNumber: ['', [Validators.required, Validators.minLength(7)]],

});

this.insuranceTypeForm = this.fb.group({
  insuranceType: ['', Validators.required],

});


}


editInsuranceCompany(row) {
  
  this.clearFormControls();
  this.formState = "Edit";
  this.rowToEdit = row;
  this.selectedId = row.insuranceCompanyId; //change this guy to the right thing

  this.insuranceCompanyForm = this.fb.group({
    companyName: [row.companyName, Validators.required],
    companyAddress: [row.address, Validators.required],
    contactEmail: [row.contactEmail, Validators.required],
    phoneNumber: [row.phoneNumber, [Validators.required, Validators.pattern(/^[0-9@#$%&*()+\-._\s]*$/), Validators.minLength(7)]],
});

this.displayInsuranceCompanyForm = true;
}


editInsuranceType(row) {
  
  this.clearFormControls();
  this.formState = "Edit";
  this.rowToEdit = row;
  this.selectedId = row.insuranceTypeId; //change this guy to the right thing

  this.insuranceTypeForm = this.fb.group({
    insuranceType: [row.insuranceType, Validators.required],
   });

this.displayInsuranceTypeForm = true;
}


removeInsuranceCompany(row) {
  let __this = this;
  swal({
    title: 'Are you sure?',
    text: "This cannot be reversed. Are you sure you want to Proceed?",
    type: 'question',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes',
    cancelButtonText: 'No, cancel!',
    confirmButtonClass: 'btn btn-success btn-move',
    cancelButtonClass: 'btn btn-danger',
    buttonsStyling: true,
  }).then(function () {
    __this.generalSetupService.deleteInsuranceCompany(row.insuranceCompanyId).subscribe((response:any) => {
      if (response.success == true) {
        __this.getAllInsuranceCompanies();
        swal(`${GlobalConfig.APPLICATION_NAME}`, 'Record has been Successfully Removed', 'success');
        
      } else {
        swal(`${GlobalConfig.APPLICATION_NAME}`, response.message, 'error');
      }
    });
  }, function (dismiss) {
    if (dismiss === 'cancel') {
      swal(`${GlobalConfig.APPLICATION_NAME}`, 'Operation cancelled', 'error');
    }
  });
}


removeInsuranceType(row) {
    let __this = this;
    swal({
      title: 'Are you sure?',
      text: "This cannot be reversed. Are you sure you want to Proceed?",
      type: 'question',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes',
      cancelButtonText: 'No, cancel!',
      confirmButtonClass: 'btn btn-success btn-move',
      cancelButtonClass: 'btn btn-danger',
      buttonsStyling: true,
    }).then(function () {
      __this.generalSetupService.deleteInsuranceType(row.insuranceTypeId).subscribe((response:any) => {
        if (response.success == true) {
          __this.getInsuranceTypes();
          swal(`${GlobalConfig.APPLICATION_NAME}`, 'Record has been Successfully Removed', 'success');
          
        } else {
          swal(`${GlobalConfig.APPLICATION_NAME}`, response.message, 'error');
        }
      });
    }, function (dismiss) {
      if (dismiss === 'cancel') {
        swal(`${GlobalConfig.APPLICATION_NAME}`, 'Operation cancelled', 'error');
      }
    });
  }


}
